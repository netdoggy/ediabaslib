<?xml version="1.0" encoding="utf-8" ?>
<fragment xmlns="http://www.holeschak.de/BmwDeepObd"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.holeschak.de/BmwDeepObd ../BmwDeepObd.xsd">
  <page name="tab_axis">
    <display name="label_axis_mode" result="STAT_ENERGIESPARMODE_WERT" display-order="0" />
    <display name="label_axis_front_left" result="STAT_HOEHENSTAND_VL_WERT" display-order="1" />
    <display name="label_axis_front_right" result="STAT_HOEHENSTAND_VR_WERT" display-order="2" />
    <display name="label_axis_rear_left" result="STAT_HOEHENSTAND_HL_WERT" display-order="3" />
    <display name="label_axis_rear_right" result="STAT_HOEHENSTAND_HR_WERT" display-order="4" />
    <display name="label_axis_bat_volt" result="STAT_SPANNUNG_KLEMME_30_WERT" display-order="5" />
    <display name="label_axis_valve_state" result="STATUS_SIGNALE_NUMERISCH" display-order="6" />
    <strings>
      <string name="tab_axis">Axis</string>
      <string name="button_axis_up">Up</string>
      <string name="button_axis_down">Down</string>
      <string name="button_error_reset">Error Reset</string>
      <string name="button_ecu_reset">ECU Reset</string>
      <string name="axis_mode_normal">Normal</string>
      <string name="axis_mode_production">Production</string>
      <string name="axis_mode_transport">Transport</string>
      <string name="axis_mode_flash">Flash</string>
      <string name="label_axis_mode">Axis mode:</string>
      <string name="label_axis_front_left">Axis front left [mm]:</string>
      <string name="label_axis_front_right">Axis front right [mm]:</string>
      <string name="label_axis_rear_left">Axis rear left [mm]:</string>
      <string name="label_axis_rear_right">Axis rear right [mm]:</string>
      <string name="label_axis_bat_volt">Battery voltage [V]:</string>
      <string name="label_axis_speed">Speed [km/h]:</string>
      <string name="label_axis_valve_state">Output states:</string>
    </strings>
    <strings lang="de">
      <string name="tab_axis">Achse</string>
      <string name="button_axis_up">Aufwärts</string>
      <string name="button_axis_down">Abwärts</string>
      <string name="button_error_reset">Fehler Reset</string>
      <string name="button_ecu_reset">ECU Reset</string>
      <string name="axis_mode_normal">Normal</string>
      <string name="axis_mode_production">Produktion</string>
      <string name="axis_mode_transport">Transport</string>
      <string name="axis_mode_flash">Flash</string>
      <string name="label_axis_mode">Achsenmodus:</string>
      <string name="label_axis_front_left">Achse vorne links [mm]:</string>
      <string name="label_axis_front_right">Achse vorne rechts [mm]:</string>
      <string name="label_axis_rear_left">Achse hinten links [mm]:</string>
      <string name="label_axis_rear_right">Achse hinten rechts [mm]:</string>
      <string name="label_axis_bat_volt">Batteriespannung [V]:</string>
      <string name="label_axis_speed">Geschwindigkeit [km/h]:</string>
      <string name="label_axis_valve_state">Zustand Ausgänge:</string>
    </strings>
    <jobs sgbd="vdp_g11" />
    <code show_warnings="true">
      <![CDATA[
    class PageClass
    {
        private const int AxisModeNormal = 0x00;
        private const int AxisModeProduction = 0x01;
        private const int AxisModeTransport = 0x02;
        private const int AxisModeFlash = 0x03;

        private const int OpModeStatus = 0;
        private const int OpModeUp = 1;
        private const int OpModeDown = 2;

        private ToggleButton buttonDown;
        private ToggleButton buttonUp;
        private Button buttonErrorReset;
        private Button buttonEcuReset;
        private int updateStep = 0;
        private int opMode = OpModeStatus;
        private int channelState = 0;
        private int channelsOffCount = 0;
        private bool errorReset = false;
        private bool ecuReset = false;
        private bool ignoreError = false;
        private MultiMap<string, EdiabasNet.ResultData> tempDict;
        private MultiMap<string, EdiabasNet.ResultData> dynDict;

        public void CreateLayout(ActivityMain activity, JobReader.PageInfo pageInfo, LinearLayout pageLayout)
        {
            LinearLayout buttonLayout1 = new LinearLayout(activity);
            buttonLayout1.Orientation = Orientation.Horizontal;

            LinearLayout.LayoutParams buttonLayoutParams = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MatchParent,
                ViewGroup.LayoutParams.WrapContent);
            buttonLayoutParams.Weight = 1;

            buttonDown = new ToggleButton(activity);
            buttonDown.Text = ActivityMain.GetPageString(pageInfo, "button_axis_down");
            buttonDown.TextOff = buttonDown.Text;
            buttonDown.TextOn = buttonDown.Text;
            buttonDown.Click += delegate
            {
                if (buttonDown == null || buttonUp == null)
                {
                    return;
                }

                if (buttonDown.Checked)
                {
                    buttonUp.Checked = false;
                    opMode = OpModeDown;
                }
                else
                {
                    opMode = OpModeStatus;
                }
            };
            buttonLayout1.AddView(buttonDown, buttonLayoutParams);

            buttonUp = new ToggleButton(activity);
            buttonUp.Text = ActivityMain.GetPageString(pageInfo, "button_axis_up");
            buttonUp.TextOff = buttonUp.Text;
            buttonUp.TextOn = buttonUp.Text;
            buttonUp.Click += delegate
            {
                if (buttonDown == null || buttonUp == null)
                {
                    return;
                }

                if (buttonUp.Checked)
                {
                    buttonDown.Checked = false;
                    opMode = OpModeUp;
                }
                else
                {
                    opMode = OpModeStatus;
                }
            };
            buttonLayout1.AddView(buttonUp, buttonLayoutParams);

            LinearLayout buttonLayout2 = new LinearLayout(activity);
            buttonLayout2.Orientation = Orientation.Horizontal;

            buttonErrorReset = new Button(activity);
            buttonErrorReset.Text = ActivityMain.GetPageString(pageInfo, "button_error_reset");
            buttonErrorReset.Click += delegate
            {
                errorReset = true;
            };
            buttonLayout2.AddView(buttonErrorReset, buttonLayoutParams);

            buttonEcuReset = new Button(activity);
            buttonEcuReset.Text = ActivityMain.GetPageString(pageInfo, "button_ecu_reset");
            buttonEcuReset.Click += delegate
            {
                ecuReset = true;
            };
            buttonLayout2.AddView(buttonEcuReset, buttonLayoutParams);

            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MatchParent,
                ViewGroup.LayoutParams.WrapContent);
            pageLayout.AddView(buttonLayout2, layoutParams);
            pageLayout.AddView(buttonLayout1, layoutParams);
        }

        public void DestroyLayout(JobReader.PageInfo pageInfo)
        {
            buttonDown?.Dispose();
            buttonDown = null;

            buttonUp?.Dispose();
            buttonUp = null;

            buttonErrorReset?.Dispose();
            buttonErrorReset = null;

            buttonEcuReset?.Dispose();
            buttonEcuReset = null;
            //Android.Util.Log.Info("Custom", "Destroyed");
        }

        public void UpdateLayout(JobReader.PageInfo pageInfo, bool pageValid, bool threadActive)
        {
            if ((buttonDown == null) || (buttonUp == null) || (buttonErrorReset == null) || (buttonEcuReset == null))
            {
                return;
            }

            if (pageValid)
            {
                buttonDown.Enabled = true;
                buttonUp.Enabled = true;
                buttonErrorReset.Enabled = true;
                buttonEcuReset.Enabled = true;
                if (opMode == OpModeDown)
                {
                    buttonDown.Checked = true;
                    buttonUp.Checked = false;
                }
                else if (opMode == OpModeUp)
                {
                    buttonDown.Checked = false;
                    buttonUp.Checked = true;
                }
                else
                {
                    buttonDown.Checked = false;
                    buttonUp.Checked = false;
                }
            }
            else
            {
                buttonDown.Checked = false;
                buttonDown.Enabled = false;
                buttonUp.Checked = false;
                buttonUp.Enabled = false;
                buttonErrorReset.Enabled = false;
                buttonEcuReset.Enabled = false;
            }
        }

        public void ExecuteJob(EdiabasNet ediabas, ref MultiMap<string, EdiabasNet.ResultData> resultDict, bool firstCall)
        {
            if (firstCall)
            {
                updateStep = 0;
                opMode = OpModeStatus;
                channelState = 0;
                channelsOffCount = 0;
                errorReset = false;
                ecuReset = false;
                tempDict = null;
                dynDict = null;
            }
            List<Dictionary<string, EdiabasNet.ResultData>> resultSets;

            try
            {
                switch (updateStep)
                {
                    case 0:
                        tempDict = null;
                        ediabas.ArgString = "ARG;STATUS_EHC_VEHICLE_HEIGHT";
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;

                        ediabas.ExecuteJob("STATUS_LESEN");

                        resultSets = ediabas.ResultSets;
                        if (resultSets != null && resultSets.Count >= 2)
                        {
                            EdiabasThread.MergeResultDictionarys(ref tempDict, resultSets[1]);
                        }
                        updateStep++;
                        break;

                    case 1:
                        ediabas.ArgString = "ARG;STATUS_HOEHENSTAENDE_LESEN";
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;

                        ediabas.ExecuteJob("STATUS_LESEN");

                        resultSets = ediabas.ResultSets;
                        if (resultSets != null && resultSets.Count >= 2)
                        {
                            EdiabasThread.MergeResultDictionarys(ref tempDict, resultSets[1]);
                        }
                        updateStep++;
                        break;

                    case 2:
                        ediabas.ArgString = "ARG;SPANNUNG_KLEMME_30_WERT";
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;

                        ediabas.ExecuteJob("STATUS_LESEN");

                        resultSets = ediabas.ResultSets;
                        if (resultSets != null && resultSets.Count >= 2)
                        {
                            EdiabasThread.MergeResultDictionarys(ref tempDict, resultSets[1]);
                        }
                        dynDict = tempDict;
                        updateStep = 0;
                        break;

                    default:
                        updateStep = 0;
                        break;
                }

                resultDict = dynDict;

                ediabas.ArgString = string.Empty;
                ediabas.ArgBinaryStd = null;
                ediabas.ResultsRequests = string.Empty;

                ediabas.ExecuteJob("STATUS_ENERGIESPARMODE");

                int axisMode = -1;
                resultSets = ediabas.ResultSets;
                if (resultSets != null && resultSets.Count >= 2)
                {
                    EdiabasNet.ResultData resultData;
                    if (resultSets[1].TryGetValue("STAT_ENERGIESPARMODE_WERT", out resultData))
                    {
                        if (resultData.OpData is Int64)
                        {
                            axisMode = (int)((Int64)resultData.OpData);
                        }
                    }
                    EdiabasThread.MergeResultDictionarys(ref resultDict, resultSets[1]);
                }

                ignoreError = false;

                if (axisMode >= 0)
                {
                    if (errorReset)
                    {
                        ediabas.ArgString = string.Empty;
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;
                        ediabas.ExecuteJob("FS_LOESCHEN");

                        errorReset = false;
                    }
                    else if (ecuReset)
                    {
                        ediabas.ArgString = string.Empty;
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;
                        ediabas.ExecuteJob("STEUERGERAETE_RESET");

                        ecuReset = false;
                        ignoreError = true;
                        channelsOffCount = 0;
                    }

                    if ((opMode == OpModeUp) && (axisMode != AxisModeNormal))
                    {   // set normal mode
                        ediabas.ArgString = string.Format("{0}", AxisModeNormal);
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;

                        ediabas.ExecuteJob("ENERGIESPARMODE");

                        ignoreError = true;
                    }

                    if ((opMode == OpModeDown) && (axisMode != AxisModeProduction))
                    {   // set production mode
                        ediabas.ArgString = string.Format("{0}", AxisModeProduction);
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;

                        ediabas.ExecuteJob("ENERGIESPARMODE");

                        ignoreError = true;
                    }

                    if ((opMode == OpModeDown) && (axisMode == AxisModeProduction))
                    {   // manual down
                        // read channel states
                        int statusCount = 0;
                        channelState = 0;
                        for (int channel = 0; channel < 3; channel++)
                        {
                            int id;
                            switch (channel)
                            {
                                case 2:
                                    id = 0x19;    // Ablassventil
                                    break;

                                default:
                                    id = 0x11 + channel;
                                    break;
                            }

                            ediabas.ArgString = string.Format("ARG;STATUS_SIGNALE_NUMERISCH;STA;0x{0:X02}", id);
                            ediabas.ArgBinaryStd = null;
                            ediabas.ResultsRequests = string.Empty;

                            ediabas.ExecuteJob("STEUERN_IO");
                            resultSets = ediabas.ResultSets;
                            if (resultSets != null && resultSets.Count >= 2)
                            {
                                EdiabasNet.ResultData resultData;
                                if (resultSets[1].TryGetValue("STAT_ANSTEUERUNG_AKTIV", out resultData))
                                {
                                    if (resultData.OpData is Int64)
                                    {
                                        statusCount++;
                                        int state = (int)((Int64)resultData.OpData);
                                        if (state != 0)
                                        {
                                            channelState |= 1 << channel;
                                        }
                                    }
                                }
                                EdiabasThread.MergeResultDictionarys(ref resultDict, resultSets[1], string.Format("STATUS_SIGNALE_NUMERISCH{0}_", channel));
                            }
                        }

                        if (!ignoreError)
                        {
                            if (statusCount >= 3)
                            {
                                if (channelState == 0x00)
                                {
                                    channelsOffCount++;
                                }
                                else
                                {
                                    channelsOffCount = 0;
                                }
                            }

                            if (channelsOffCount >= 6)
                            {
                                ecuReset = true;
                            }
                            else if (channelsOffCount == 3)
                            {
                                errorReset = true;
                            }
                        }

                        // set channel state
                        ediabas.ArgString = "ARG;STEUERN_DIGITALSIGNALE;0x02;4;0xC3";
                        ediabas.ArgBinaryStd = null;
                        ediabas.ResultsRequests = string.Empty;

                        ediabas.ExecuteJob("STEUERN");
                    }
                    else
                    {
                        channelsOffCount = 0;
                    }
                }
            }
            catch (Exception)
            {
                if (!ignoreError)
                {
                    throw;
                }

                ignoreError = false;
            }
        }

        public string FormatResult(JobReader.PageInfo pageInfo, MultiMap<string, EdiabasNet.ResultData> resultDict, string resultName, ref Android.Graphics.Color? textColor)
        {
            string result = string.Empty;
            bool found;

            switch (resultName)
            {
                case "STAT_ENERGIESPARMODE_WERT":
                {
                    Int64 axisMode = ActivityMain.GetResultInt64 (resultDict, resultName, 0, out found);
                    if (found)
                    {
                        switch (axisMode)
                        {
                            case AxisModeNormal:
                                result = ActivityMain.GetPageString(pageInfo, "axis_mode_normal");
                                break;

                            case AxisModeProduction:
                                result = ActivityMain.GetPageString(pageInfo, "axis_mode_production");
                                break;

                            case AxisModeTransport:
                                result = ActivityMain.GetPageString(pageInfo, "axis_mode_transport");
                                break;

                            case AxisModeFlash:
                                result = ActivityMain.GetPageString(pageInfo, "axis_mode_flash");
                                break;

                            default:
                                result = ActivityMain.FormatResultInt64(resultDict, resultName, "{0,2}", 0);
                                break;
                        }
                    }
                    break;
                }

                case "STAT_HOEHENSTAND_VL_WERT":
                case "STAT_HOEHENSTAND_VR_WERT":
                case "STAT_HOEHENSTAND_HL_WERT":
                case "STAT_HOEHENSTAND_HR_WERT":
                    result = ActivityMain.FormatResultDouble(resultDict, resultName, "{0,6:0.0}", 0);
                    break;

                case "STAT_SPANNUNG_KLEMME_30_WERT":
                    result = ActivityMain.FormatResultDouble(resultDict, resultName, "{0,6:0.0}", 0);
                    break;

                case "STATUS_SIGNALE_NUMERISCH":
                    for (int channel = 0; channel < 3; channel++)
                    {
                        result = ActivityMain.FormatResultInt64(resultDict, string.Format(ActivityMain.Culture, "STATUS_SIGNALE_NUMERISCH{0}_STAT_ANSTEUERUNG_AKTIV", channel), "{0}", 0) + result;
                    }
                    if (!string.IsNullOrEmpty(result))
                    {
                        result += string.Format(ActivityMain.Culture, " ({0})", channelsOffCount);
                    }
                    break;
            }
            return result;
        }

        public void BroadcastReceived(JobReader.PageInfo pageInfo, Android.Content.Context context, Android.Content.Intent intent)
        {
            string request = intent.GetStringExtra("custom_action");
            if (string.IsNullOrEmpty(request))
            {
                return;
            }
            request = request.ToLowerInvariant();
            switch (request)
            {
                case "mode_status":
                    opMode = OpModeStatus;
                    break;

                case "mode_up":
                    opMode = OpModeUp;
                    break;

                case "mode_down":
                    opMode = OpModeDown;
                    break;
            }
        }
    }
      ]]>
    </code>
  </page>
</fragment>
